{"version":3,"file":"static/js/935.aac0a8c4.chunk.js","mappings":"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","sources":["store/chatSelector.ts","components/Chat/Chat.tsx"],"sourcesContent":["import { AppStateType } from \"./store\";\r\n\r\nexport const getChatMessages = (state: AppStateType) => {\r\n    return state.chat.messages\r\n}\r\nexport const getChatStatus = (state: AppStateType) => {\r\nreturn state.chat.status\r\n}","import { Field, Form, Formik, FormikHelpers, FormikValues } from 'formik'\r\nimport { FC, memo, useEffect, useRef, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { TChatMessageAPI } from '../../api/chatAPI'\r\nimport { getChatMessages, getChatStatus } from '../../store/chatSelector'\r\nimport { sendMessage, startMessagesListener, stopMessagesListener } from '../../store/chatSlice'\r\nimport { AppDispatch } from '../../store/store'\r\n\r\n\r\n\r\nconst Chat: FC = () => {\r\n    const dispatch: AppDispatch = useDispatch()\r\n    const status = useSelector(getChatStatus)\r\n\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListener())\r\n\r\n        return () => {\r\n            dispatch(stopMessagesListener())\r\n        }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <>\r\n            <Messages isAutoScroll={isAutoScroll} setIsAutoScroll={setIsAutoScroll} />\r\n            <AddMessageForm setIsAutoScroll={setIsAutoScroll} />\r\n        </>\r\n    )\r\n}\r\n\r\ntype TMessagesProps = {\r\n    isAutoScroll: boolean,\r\n    setIsAutoScroll: (toggle: boolean) => void,\r\n}\r\n\r\nconst Messages: FC<TMessagesProps> = ({ isAutoScroll, setIsAutoScroll }) => {\r\n    const messages = useSelector(getChatMessages)\r\n    const messagesEndRef = useRef<null | HTMLDivElement>(null)\r\n\r\n    const scrollToBottom = () => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })\r\n    }\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement>) => {\r\n        const element = e.currentTarget\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 100) {\r\n            setIsAutoScroll(true)\r\n        } else {\r\n            setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            scrollToBottom()\r\n        }\r\n    }, [messages])\r\n\r\n    return (\r\n        <div style={{ height: '590px', overflowY: 'auto' }} onScroll={scrollHandler}>\r\n            {messages.map((m, index) => <Message key={m.id} message={m} />)}\r\n            <div ref={messagesEndRef} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Message: FC<{ message: TChatMessageAPI }> = memo( ({ message }) => {\r\n    return (\r\n        <>\r\n            <img src={message.photo} alt={''} style={{ width: '30px' }} /> <b>{message.userName}</b>\r\n            <div>{message.message}</div>\r\n        </>\r\n    )\r\n})\r\n\r\ntype TAddMessageFormProps = {\r\n    setIsAutoScroll: (toggle: boolean) => void\r\n}\r\n\r\nconst AddMessageForm: FC<TAddMessageFormProps> = ({ setIsAutoScroll }) => {\r\n    const dispatch: AppDispatch = useDispatch()\r\n    const status = useSelector(getChatStatus)\r\n\r\n    const submit = (formData: FormikValues, formik: FormikHelpers<{ message: string }>) => {\r\n        dispatch(sendMessage(formData.message))\r\n        setIsAutoScroll(true)\r\n        formik.resetForm()\r\n    }\r\n\r\n    return (\r\n        <Formik initialValues={{ message: '' }}\r\n            enableReinitialize\r\n            onSubmit={submit}>\r\n            {({ errors, values }) =>\r\n                <Form>\r\n                    <div>\r\n                        <Field name={'message'}\r\n                            component={'textarea'}\r\n                            type={'text'}\r\n                            placeholder={'Write a message...'}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <button type={'submit'}\r\n                            disabled={status !== 'ready' || values.message === ''}>Send message\r\n                        </button>\r\n                    </div>\r\n                </Form>\r\n            }\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default Chat"],"names":["getChatMessages","state","chat","messages","getChatStatus","status","Messages","_ref","isAutoScroll","setIsAutoScroll","useSelector","messagesEndRef","useRef","useEffect","_messagesEndRef$curre","current","scrollIntoView","behavior","scrollToBottom","_jsxs","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","children","map","m","index","_jsx","Message","message","id","ref","memo","_ref2","_Fragment","src","photo","alt","width","userName","AddMessageForm","_ref3","dispatch","useDispatch","Formik","initialValues","enableReinitialize","onSubmit","formData","formik","sendMessage","resetForm","_ref4","errors","values","Form","Field","name","component","type","placeholder","disabled","_useState","useState","_useState2","_slicedToArray","startMessagesListener","stopMessagesListener"],"sourceRoot":""}