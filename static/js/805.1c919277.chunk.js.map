{"version":3,"file":"static/js/805.1c919277.chunk.js","mappings":"8KACA,EAA8B,6BAA9B,EAA4E,gCAA5E,EAA0H,6BCA1H,EAA2B,0B,4BCc3B,EAN4B,SAAHA,GAAiC,IAA5BC,EAAOD,EAAPC,QAASC,EAAYF,EAAZE,aACnC,OACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,IAAG,GAADC,OAAIJ,GAAgBK,GAAgBC,SAAEP,GAEhE,ECZA,EAA0B,wBCY1B,EAN2B,SAAHD,GAAgB,IAAXS,EAAIT,EAAJS,KACzB,OACIN,EAAAA,EAAAA,KAAA,OAAKC,UAAWG,EAAcC,SAAEC,GAExC,E,oBCVA,EAAuB,0BAAvB,EAAgE,kCAAhE,EAAwG,yBAAxG,EAAiJ,mC,oBCkCjJ,EA1BuB,WACnB,IAAMC,GAAwBC,EAAAA,EAAAA,MAO9B,OACIR,EAAAA,EAAAA,KAACS,EAAAA,GAAM,CAACC,cAAe,CAACZ,QAAS,IACzBa,SAPG,SAACC,GACZL,GAASM,EAAAA,EAAAA,GAAWD,EAASd,UAC7Bc,EAASd,QAAU,EACvB,EAI6BO,SACpB,SAAAR,GAAA,IAAEiB,EAAMjB,EAANiB,OAAM,OACLC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACf,UAAWG,EAAWC,SAAA,EACxBL,EAAAA,EAAAA,KAACiB,EAAAA,GAAK,CAACX,KAAM,UACNY,UAAW,WACXC,YAAa,qBACbC,SAAUC,EAAAA,EACVpB,UAAWC,IAAGE,EAAoBU,EAAOhB,QAAUM,OAAsBkB,MAEhFtB,EAAAA,EAAAA,KAAA,UAAQC,UAAWG,EAAWmB,KAAM,SAASlB,SAAC,mBAC3C,GAIvB,EC/BamB,EAAkB,SAACC,GAC5B,OAAOA,EAAMC,QAAQC,YACzB,EAEaC,EAAuB,SAACH,GACjC,OAAOA,EAAMC,QAAQG,gBACzB,EAEaC,EAAa,SAACL,GACvB,OAAOA,EAAMC,QAAQA,OACzB,EC2BA,EA9BoB,WAEhB,IAAMC,GAAeI,EAAAA,EAAAA,IAAYP,GAC3BQ,GAAoBD,EAAAA,EAAAA,IAAYH,GAChCF,GAAUK,EAAAA,EAAAA,IAAYD,GAEtBG,EAAqBN,EAAaO,KAAI,SAAAC,GAAC,OACzCnC,EAAAA,EAAAA,KAACoC,EAAO,CAAYtC,QAASqC,EAAErC,QAASC,aAAcK,GAAxC+B,EAAEE,GAA0D,IAExEC,EAA0BN,EAAkBE,KAAI,SAAAC,GAAC,OACnDnC,EAAAA,EAAAA,KAACoC,EAAO,CAAYtC,QAASqC,EAAErC,SAAjBqC,EAAEE,GAAyB,IAEvCE,EAAgBb,EAAQQ,KAAI,SAAAM,GAAC,OAC/BxC,EAAAA,EAAAA,KAACyC,EAAM,CAAYnC,KAAMkC,EAAElC,MAAdkC,EAAEH,GAAmB,IAGtC,OACItB,EAAAA,EAAAA,MAAA,OAAKd,UAAWG,EAAkBC,SAAA,EAC9BU,EAAAA,EAAAA,MAAA,OAAAV,SAAA,CACKiC,EACAL,GACDjC,EAAAA,EAAAA,KAAC0C,EAAW,QAEhB1C,EAAAA,EAAAA,KAAA,OAAKC,UAAWG,EAAqBC,SAChCkC,MAIjB,C","sources":["webpack://social-network/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/Message/Message.module.css","components/Dialogs/Message/Message.tsx","webpack://social-network/./src/components/Dialogs/Dialog/Dialog.module.css?19be","components/Dialogs/Dialog/Dialog.tsx","webpack://social-network/./src/components/Dialogs/DialogsForm.module.css?12d8","components/Dialogs/DialogsForm.tsx","store/dialogsSelector.ts","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsPage\":\"Dialogs_dialogsPage__w9h-s\",\"dialogsContent\":\"Dialogs_dialogsContent__F3DYI\",\"userMessage\":\"Dialogs_userMessage__6jeMD\"};","// extracted by mini-css-extract-plugin\nexport default {\"messages\":\"Message_messages__vjqdS\"};","import React, {FC} from \"react\";\r\nimport style from \"./Message.module.css\";\r\nimport cn from \"classnames\";\r\n\r\ntype TProps = {\r\n    message: string\r\n    styleMessage?: string\r\n}\r\n\r\nconst Message: FC<TProps> = ({message, styleMessage}) => {\r\n    return (\r\n        <div className={cn(`${styleMessage}`, style.messages)}>{message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialog_dialogs__+qHcH\"};","import style from \"./Dialog.module.css\";\r\nimport React, {FC} from \"react\";\r\n\r\ntype TProps = {\r\n    name: string\r\n}\r\n\r\nconst Dialog: FC<TProps> = ({name}) => {\r\n    return (\r\n        <div className={style.dialogs}>{name}</div>\r\n    )\r\n}\r\n\r\nexport default Dialog;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"DialogsForm_form__iUdzG\",\"formTextarea\":\"DialogsForm_formTextarea__vC+xp\",\"btn\":\"DialogsForm_btn__Vbv3d\",\"errorTextarea\":\"DialogsForm_errorTextarea__7NYK2\",\"error\":\"DialogsForm_error__jaUv1\"};","import {Field, Form, Formik, FormikValues} from 'formik'\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport style from \"./DialogsForm.module.css\";\r\nimport React, {FC} from \"react\";\r\nimport cn from \"classnames\";\r\nimport {AppDispatch} from '../../store/store'\r\nimport {useDispatch} from 'react-redux'\r\nimport { addMessage } from '../../store/dialogsSlice';\r\n\r\nconst DialogsForm: FC= () => {\r\n    const dispatch: AppDispatch = useDispatch()\r\n\r\n    const submit = (formData: FormikValues) => {\r\n        dispatch(addMessage(formData.message))\r\n        formData.message = ''\r\n    }\r\n\r\n    return (\r\n        <Formik initialValues={{message: ''}}\r\n                onSubmit={submit}>\r\n            {({errors}) =>\r\n                <Form className={style.form}>\r\n                    <Field name={\"message\"}\r\n                           component={\"textarea\"}\r\n                           placeholder={\"Write a message...\"}\r\n                           validate={required}\r\n                           className={cn(style.formTextarea, errors.message ? style.errorTextarea : undefined)}\r\n                    />\r\n                    <button className={style.btn} type={\"submit\"}>Send message</button>\r\n                </Form>\r\n            }\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default DialogsForm;","import {AppStateType} from './store'\r\n\r\nexport const getUserMessages = (state: AppStateType) => {\r\n    return state.dialogs.userMessages\r\n}\r\n\r\nexport const getOtherUserMessages = (state: AppStateType) => {\r\n    return state.dialogs.otherUserMessage\r\n}\r\n\r\nexport const getDialogs = (state: AppStateType) => {\r\n    return state.dialogs.dialogs\r\n}","import React, {FC} from \"react\";\r\nimport style from \"./Dialogs.module.css\";\r\nimport Message from \"./Message/Message\";\r\nimport Dialog from \"./Dialog/Dialog\";\r\nimport DialogsForm from \"./DialogsForm\";\r\nimport {DialogsType, MessagesType} from \"../../types/types\";\r\nimport {useSelector} from 'react-redux'\r\nimport {getDialogs, getOtherUserMessages, getUserMessages} from '../../store/dialogsSelector'\r\n\r\nconst Dialogs: FC = () => {\r\n\r\n    const userMessages = useSelector(getUserMessages)\r\n    const otherUserMessages = useSelector(getOtherUserMessages)\r\n    const dialogs = useSelector(getDialogs)\r\n\r\n    const userMessageElement = userMessages.map(m =>\r\n        <Message key={m.id} message={m.message} styleMessage={style.userMessage}/>\r\n    )\r\n    const otherUserMessageElement = otherUserMessages.map(m =>\r\n        <Message key={m.id} message={m.message}/>\r\n    )\r\n    const dialogElement = dialogs.map(d =>\r\n        <Dialog key={d.id} name={d.name}/>\r\n    )\r\n\r\n    return (\r\n        <div className={style.dialogsPage}>\r\n            <div>\r\n                {otherUserMessageElement}\r\n                {userMessageElement}\r\n                <DialogsForm/>\r\n            </div>\r\n            <div className={style.dialogsContent}>\r\n                {dialogElement}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;"],"names":["_ref","message","styleMessage","_jsx","className","cn","concat","style","children","name","dispatch","useDispatch","Formik","initialValues","onSubmit","formData","addMessage","errors","_jsxs","Form","Field","component","placeholder","validate","required","undefined","type","getUserMessages","state","dialogs","userMessages","getOtherUserMessages","otherUserMessage","getDialogs","useSelector","otherUserMessages","userMessageElement","map","m","Message","id","otherUserMessageElement","dialogElement","d","Dialog","DialogsForm"],"sourceRoot":""}