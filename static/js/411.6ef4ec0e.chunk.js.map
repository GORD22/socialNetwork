{"version":3,"file":"static/js/411.6ef4ec0e.chunk.js","mappings":"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","sources":["webpack://social-network/./src/components/Profile/Profile.module.css?b512","webpack://social-network/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","webpack://social-network/./src/components/Profile/MyPosts/MyPostsForm.module.css?9343","components/Profile/MyPosts/MyPostsForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","webpack://social-network/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://social-network/./src/components/Profile/ProfileStatus/ProfileStatus.module.css?1f32","store/profileSelector.ts","components/Profile/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfoForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","hoc/withAuthRedirect.tsx","components/Profile/Profile.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"Profile_profile__iA9ZL\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__05pLk\"};","import React, {FC} from \"react\";\r\nimport style from \"./Post.module.css\";\r\nimport {ProfileType} from \"../../../../types/types\";\r\nconst emptyUser: string = require(\"../../../../assets/img/users/user_img_empty.svg\");\r\n\r\ntype PropsType = {\r\n    postText: string\r\n    likeCount: number\r\n    profile: ProfileType | null\r\n}\r\nconst Post: FC<PropsType> = ({postText, likeCount, profile}) => {\r\n    return (\r\n        <div className={style.item}>\r\n            {\r\n                profile && <img src={profile.photos.small || emptyUser} alt=\"\"/>\r\n            }\r\n            {postText}\r\n            <div>like {likeCount}</div>\r\n        </div>\r\n    )\r\n}\r\nexport default Post;","// extracted by mini-css-extract-plugin\nexport default {\"errorTextarea\":\"MyPostsForm_errorTextarea__KG6kG\",\"error\":\"MyPostsForm_error__dsCO5\",\"form\":\"MyPostsForm_form__XJ-HO\"};","import {Field, Form, Formik} from \"formik\";\r\nimport {required} from \"../../../utils/validators/validators\";\r\nimport style from \"./MyPostsForm.module.css\";\r\nimport React, {FC} from \"react\";\r\n\r\ntype TProps = {\r\n    addPosts: (postText: string) => void\r\n}\r\n\r\nconst MyPostsForm: FC<TProps> = ({addPosts}) => {\r\n    return (\r\n        <div className={style.form}>\r\n            <Formik initialValues={{postText: ''}}\r\n                    onSubmit={formData => {\r\n                        addPosts(formData.postText);\r\n                        formData.postText = '';\r\n                    }}>\r\n                {({errors}) =>\r\n                    <Form>\r\n                        <Field name={\"postText\"}\r\n                               component={\"textarea\"}\r\n                               placeholder={\"Write a post...\"}\r\n                               validate={required}\r\n                               className={errors.postText ? style.errorTextarea : undefined}\r\n                        />\r\n                        {errors.postText &&\r\n                            <div className={style.error}>{errors.postText}</div>}\r\n                        <div>\r\n                            <button type={\"submit\"}>Add post</button>\r\n                        </div>\r\n                    </Form>\r\n                }\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPostsForm;","import React, {FC, memo} from \"react\";\r\nimport Post from \"./Post/Post\";\r\nimport MyPostsForm from \"./MyPostsForm\";\r\nimport {PostType, ProfileType} from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n    posts: Array<PostType>\r\n    profile: ProfileType | null\r\n    addPosts: (postText: string) => void\r\n}\r\n\r\nconst MyPosts: FC<PropsType> = ({posts, profile, addPosts}) => {\r\n    const postElement = posts.map(p =>\r\n        <Post key={p.id} postText={p.text} profile={profile} likeCount={p.likeCount}/>\r\n    )\r\n    return (\r\n        <>\r\n            <div>\r\n                My post\r\n            </div>\r\n            <MyPostsForm addPosts={addPosts}/>\r\n            {postElement}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(MyPosts);\r\n","import React, {FC} from \"react\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {addPost} from \"../../../store/profileSlice\";\r\nimport {PostType, ProfileType} from \"../../../types/types\";\r\nimport {AppStateType} from \"../../../store/store\";\r\n\r\ntype MapStateToPropsType = {\r\n    posts: Array<PostType>\r\n    profile: ProfileType | null\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (postText: string) => void\r\n}\r\n\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst MyPostsContainer: FC<PropsType> = ({posts, profile, addPost}) => {\r\n    return (\r\n        <MyPosts posts={posts} profile={profile} addPosts={addPost}/>\r\n    )\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    posts: state.profile.posts,\r\n    profile: state.profile.profile\r\n})\r\n\r\nexport default connect(mapStateToProps,{addPost})(MyPostsContainer);","// extracted by mini-css-extract-plugin\nexport default {\"profileInfo\":\"ProfileInfo_profileInfo__XMtGF\"};","// extracted by mini-css-extract-plugin\nexport default {\"status\":\"ProfileStatus_status__ZVD3J\"};","import {AppStateType} from './store'\r\n\r\nexport const getProfileStatus = (state: AppStateType) => {\r\n    return state.profile.status\r\n}\r\nexport const getProfileInfo = (state: AppStateType) => {\r\n    return state.profile.profile\r\n}\r\n","import React, {FC, useEffect, useState} from \"react\";\r\nimport style from \"./ProfileStatus.module.css\";\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {getProfileStatus} from '../../../store/profileSelector'\r\nimport {AppDispatch} from '../../../store/store'\r\nimport { updateStatus } from \"../../../store/profileSlice\";\r\n\r\ntype TProps = {\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileStatus: FC<TProps> = ({isOwner}) => {\r\n    const dispatch: AppDispatch = useDispatch()\r\n\r\n    const status = useSelector(getProfileStatus)\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [newStatus, setNewStatus] = useState(status);\r\n\r\n    useEffect(() => {\r\n        setNewStatus(status)\r\n    }, [status])\r\n\r\n    const editModeActivate = () => {\r\n        setEditMode(true)\r\n    }\r\n    const changeStatus = (e: React.FormEvent<HTMLInputElement>) => {\r\n        setNewStatus(e.currentTarget.value)\r\n    }\r\n    const editModeDisable = () => {\r\n        setEditMode(false);\r\n        dispatch(updateStatus(newStatus));\r\n    }\r\n    return (\r\n        <div className={style.status}>\r\n            {\r\n                !isOwner ? <div><b>Status: </b>{status}</div> :\r\n                !editMode ?\r\n                    <div onDoubleClick={editModeActivate}>\r\n                        <b>Status: </b>{status}\r\n                    </div> :\r\n                    <div><input placeholder={'Change your status'} autoFocus={true} onChange={changeStatus}\r\n                                onBlur={editModeDisable} value={newStatus}/></div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatus;","import React, {FC} from 'react'\r\nimport {Field, Form, Formik} from 'formik'\r\nimport {ProfileType} from '../../../types/types'\r\nimport {AppDispatch} from '../../../store/store'\r\nimport {useDispatch} from 'react-redux'\r\nimport { saveProfile } from '../../../store/profileSlice'\r\n\r\ntype TProps = {\r\n    profile: ProfileType | null\r\n    setEditMode: (toggle: boolean) => void\r\n}\r\n\r\nconst ProfileInfoForm: FC<TProps> = ({profile, setEditMode}) => {\r\n    const dispatch: AppDispatch = useDispatch()\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        dispatch(saveProfile(formData))\r\n        setEditMode(false)\r\n    }\r\n\r\n    return (\r\n        profile &&\r\n        <Formik initialValues={profile} onSubmit={onSubmit}>\r\n            {({errors}) =>\r\n                <Form>\r\n                    <div>\r\n                        <b> Name: </b>\r\n                        <Field name={'fullName'}\r\n                               component={'input'}\r\n                               placeholder={'Your name'}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <b>Looking for a job </b>\r\n                        <Field name={'lookingForAJob'}\r\n                               component={'input'}\r\n                               type={'checkBox'}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <b>Search job status: </b>\r\n                        <Field name={'lookingForAJobDescription'}\r\n                               component={'input'}\r\n                               placeholder={'Your job status'}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <b>About me: </b>\r\n                        <Field name={'aboutMe'}\r\n                               component={'input'}\r\n                               placeholder={'Tell about yourself'}\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <b>Contacts: </b>\r\n                        {\r\n                            Object.keys(profile.contacts).map(key => {\r\n                                return (\r\n                                    <div key={key}>\r\n                                        <b>{key}: </b>\r\n                                        <Field name={`contacts.${key}`}\r\n                                               component={'input'}\r\n                                               placeholder={`Your ${key}`}\r\n                                        />\r\n                                    </div>\r\n                                )\r\n                            })\r\n                        }\r\n                    </div>\r\n                    <div>\r\n                        <button type={'submit'}>Save information</button>\r\n                    </div>\r\n                </Form>\r\n            }\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default ProfileInfoForm","import React, {ChangeEvent, FC, useState} from 'react'\r\nimport style from './ProfileInfo.module.css'\r\nimport ProfileStatus from '../ProfileStatus/ProfileStatus'\r\nimport ProfileInfoForm from './ProfileInfoForm'\r\nimport {ContactsType, ProfileType} from '../../../types/types'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {getProfileStatus} from '../../../store/profileSelector'\r\nimport {AppDispatch} from '../../../store/store'\r\nimport { savePhoto } from '../../../store/profileSlice'\r\n\r\nconst emptyUserImg: string = require('../../../assets/img/users/user_img_empty.svg')\r\n\r\ntype ContactType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    isOwner: boolean\r\n}\r\n\r\nconst Contact: FC<ContactType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div>\r\n            <b>{contactTitle}: </b> {contactValue}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProfileInfo: FC<PropsType> = ({profile, isOwner}) => {\r\n    const dispatch: AppDispatch = useDispatch()\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const saveNewPhoto = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            dispatch(savePhoto(e.target.files[0]))\r\n        }\r\n    }\r\n    return (\r\n        <div className={style.profileInfo}>\r\n            {\r\n                profile &&\r\n                <img src={profile.photos.large || emptyUserImg} alt=\"\"/>\r\n            }\r\n            {\r\n                isOwner && <div><input type={'file'} onChange={saveNewPhoto}/></div>\r\n            }\r\n            <ProfileStatus isOwner={isOwner}/>\r\n            {\r\n                !editMode &&\r\n                <div>\r\n                    {\r\n                        isOwner &&\r\n                        <button onClick={() => setEditMode(true)}>Edit information</button>\r\n                    }\r\n                    {\r\n                        profile &&\r\n                        <>\r\n                            <div>\r\n                                <b>Name: </b> {profile.fullName}\r\n                            </div>\r\n                            <div>\r\n                                <b>Search job status: </b> {profile.lookingForAJobDescription}\r\n                            </div>\r\n                            <div>\r\n                                <b>About me: </b> {profile.aboutMe}\r\n                            </div>\r\n                            {\r\n                                Object.keys(profile.contacts).map(key =>\r\n                                    <Contact key={key} contactTitle={key}\r\n                                             contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                                )\r\n                            }\r\n                        </>\r\n                    }\r\n\r\n\r\n                </div>\r\n            }\r\n\r\n            {\r\n                editMode && <ProfileInfoForm profile={profile} setEditMode={setEditMode}/>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","import React, {ComponentType, FC} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {AppStateType} from \"../store/store\";\r\n\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\ntype TMapStateToProps = {\r\n    isAuth: boolean\r\n}\r\ntype TMapDispatchToProps = {}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: FC<TMapStateToProps & TMapDispatchToProps> = (props) => {\r\n        const {isAuth, ...restProps} = props\r\n        if (!isAuth) {\r\n            return <Navigate to={\"/login\"} />\r\n        }\r\n        // @ts-ignore\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    const ConnectAuthRedirectComponent = connect<TMapStateToProps, TMapDispatchToProps, WCP, AppStateType>\r\n        (mapStateToPropsForRedirect, {})\r\n    (RedirectComponent);\r\n\r\n    return ConnectAuthRedirectComponent;\r\n}\r\n","import React, {FC, useEffect} from 'react'\r\nimport style from './Profile.module.css'\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\r\nimport Preloader from '../common/Preloader/Preloader'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {getProfileInfo} from '../../store/profileSelector'\r\nimport {getUserId} from '../../store/authSelector'\r\nimport {useParams} from 'react-router-dom'\r\nimport {AppDispatch} from '../../store/store'\r\nimport {getProfile, getStatus} from '../../store/profileSlice'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\n\r\nconst Profile: FC = () => {\r\n    const dispatch: AppDispatch = useDispatch()\r\n\r\n    const userId = useSelector(getUserId)\r\n    const profile = useSelector(getProfileInfo)\r\n    const params = useParams()\r\n\r\n    const refreshProfile = () => {\r\n        let profileId = Number(params.userId) || null\r\n        if (!profileId) {\r\n            profileId = userId\r\n        }\r\n        if (profileId) {\r\n            dispatch(getProfile(profileId))\r\n            dispatch(getStatus(profileId))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        refreshProfile()\r\n    }, [params, userId])\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.profile}>\r\n            <ProfileInfo profile={profile} isOwner={Number(params.userId) === userId || !params.userId}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withAuthRedirect(Profile);","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}"],"names":["emptyUser","require","_ref","postText","likeCount","profile","_jsxs","className","style","children","_jsx","src","photos","small","alt","addPosts","Formik","initialValues","onSubmit","formData","_ref2","errors","Form","Field","name","component","placeholder","validate","required","undefined","type","MyPosts","posts","postElement","map","p","Post","text","id","_Fragment","MyPostsForm","memo","connect","state","addPost","getProfileStatus","status","getProfileInfo","isOwner","dispatch","useDispatch","useSelector","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","_useState4","newStatus","setNewStatus","useEffect","autoFocus","onChange","e","currentTarget","value","onBlur","updateStatus","onDoubleClick","saveProfile","Object","keys","contacts","key","concat","emptyUserImg","Contact","contactTitle","contactValue","large","_e$target$files","target","files","length","savePhoto","ProfileStatus","onClick","fullName","lookingForAJobDescription","aboutMe","ProfileInfoForm","mapStateToPropsForRedirect","isAuth","auth","WrappedComponent","userId","getUserId","params","useParams","profileId","Number","getProfile","getStatus","refreshProfile","ProfileInfo","MyPostsContainer","Preloader","props","restProps","source","excluded","i","objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","indexOf","prototype","propertyIsEnumerable","call","_objectWithoutProperties","_excluded","_objectSpread","Navigate","to"],"sourceRoot":""}